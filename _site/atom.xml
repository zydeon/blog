<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Pedro Matias</title>
 <link href="http://pmatias.com/atom.xml" rel="self"/>
 <link href="http://pmatias.com/"/>
 <updated>2016-03-14T18:10:00+00:00</updated>
 <id>http://pmatias.com</id>
 <author>
   <name>Pedro Matias</name>
   <email>pedro@pmatias.com</email>
 </author>

 
 <entry>
   <title>HackerRank Week of Code 19 (Part I)</title>
   <link href="http://pmatias.com/2016/03/02/hackerrank-w19-1/"/>
   <updated>2016-03-02T00:00:00+00:00</updated>
   <id>http://pmatias.com/2016/03/02/hackerrank-w19-1</id>
   <content type="html">&lt;p&gt;This is the first of a series of posts I plan to write about one of the first programming contests I have competed in, HackerRank’s &lt;a href=&quot;https://www.hackerrank.com/contests/w19/challenges&quot;&gt;Week of Code 19&lt;/a&gt;. The set of problems was quite interesting and they were released one at a time every day throughout the week of XX, in increasing order of difficulty.&lt;/p&gt;

&lt;p&gt;I will skip the first problem, because it’s a warmup kind of question. The second problem is called “Two Robots” and goes like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You have a warehouse with $M$ containers filled with an infinite number of candies. The containers are arranged in a single row, equally spaced to be $1$ meter apart. You also have $2$ robots that can pick up $1$ piece of candy and transport it between any two containers.&lt;br /&gt;
The robots take instructions in the form of queries consisting of two integers, $M_a$ and $M_b$, respectively. To execute a query, a robot travels to container $M_a$, picks up $1$ candy, transports it to container $M_b$, and then stops at $M_b$ until it receives another query.&lt;br /&gt;
Calculate the minimum total distance the robots must travel to execute $N$ queries in order.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For the first query a robot executes, there is no travel distance. For each subsequent query that robot executes, it must travel from the location where it completed its last query.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;(For details on the problem size and input/output samples, check the original &lt;a href=&quot;https://www.hackerrank.com/contests/w19/challenges/two-robots&quot;&gt;problem formulation&lt;/a&gt;.)&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;The trivial $O(2^N)$ solution would be to enumerate every possible assignment of queries to robots and then simulate their execution by the order given in the input (which is the required one). Naturally, this wasn’t enough to get AC.&lt;/p&gt;

&lt;p&gt;One could also think of a greedy strategy to solve the problem, such as iterating over the queries (in order) and, to each of them, assign the robot which travels less to execute it, based on its current position. But the following counter-example proves it wrong.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/img/hackerrank-w19-1/counter-example.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;message spoil-alert&quot;&gt;
To avoid spoils and let you think on the problem without accidentally looking through the solution, you need to press the button below to reveal it.
&lt;/div&gt;
&lt;p&gt;&lt;button class=&quot;toggle-solution show&quot; href=&quot;#&quot;&gt;Show solution&lt;/button&gt;
&lt;button class=&quot;toggle-solution hide&quot; href=&quot;#&quot;&gt;Hide&lt;/button&gt;&lt;/p&gt;

&lt;div class=&quot;hidden-solution&quot;&gt;&lt;h3 id=&quot;partitioning-the-problem&quot;&gt;Partitioning the problem&lt;/h3&gt;

&lt;p&gt;A common technique to solve a problem is to break it down into a simpler ones. In this case, the problem size is directly given by $N=\text{#queries}$, so we probably need to break our problem down using this criteria. Luckily, we don’t need to worry about the order through which queries get executed, since it is fixed by the input.&lt;/p&gt;

&lt;p&gt;Let’s use the following notation, to simplify our reasoning:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$S_i$ ($T_i$) is the container from (to) which candies need to be taken (delivered) in the $i$&lt;sup&gt;th&lt;/sup&gt; query.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, imagine that we are left with $1$ query and that the robots are in positions $x$ and $y$. Can we solve the problem easily? In this case, it is trivial to see how: just pick the robot whose distance to $S_{N}$ is smaller.&lt;/p&gt;

&lt;p&gt;Following the same reasoning, if we were to execute the $i$&lt;sup&gt;th&lt;/sup&gt; query and the robots were in positions $x’$ and $y’$, then we would choose the one which minimises the distance it needs to travel to execute this query, plus the total distance needed in the remaining sub-problem (notice that the position of one of the robots has changed, as well as the next query to be executed).&lt;/p&gt;

&lt;p&gt;Hence, each of our sub-problems can be identified by $3$ parameters and we can solve each one of them through a recurrence relation, formalised as follows:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\label{dp1}
 \mathcal{P}(i,x,y) = |T_i-S_i|+ \min
 \begin{cases}
  \mathcal{P}(i+1,T_i,y) + |S_i-x| \\[1em]
  \mathcal{P}(i+1,x,T_i) + |S_i-y|
 \end{cases} \\[2em]
 ,\forall 1 \le i \le N \text{ and } \forall 1 \le x,y \le M&lt;/script&gt;

&lt;p&gt;As for base cases, we have that: $\mathcal{P}(N+1,x,y)=0 \; (\forall \; 1 \le x,y \le M)$. The optimal solution is given by $\min_{1 \le x,y \le M} \mathcal{P}(1,x,y)$.&lt;/p&gt;

&lt;p&gt;By now, you’re probably already seeing where this is going (*cof* DP *cof*). With the above relation, we established the property of &lt;a href=&quot;https://en.wikipedia.org/wiki/Optimal_substructure&quot;&gt;optimal substructure&lt;/a&gt;. It is also easy to see how we can have &lt;a href=&quot;https://en.wikipedia.org/wiki/Overlapping_subproblems&quot;&gt;overlapping subproblems&lt;/a&gt;, so we can take advantage of memoization and, hence, dynamic programming.&lt;/p&gt;

&lt;h3 id=&quot;complexity&quot;&gt;Complexity&lt;/h3&gt;

&lt;p&gt;The time complexity for filling up the DP table (and thus computing the optimal solution) is $O(NM^2)$ (think about the range of all parameters). However, we can improve it to $O(N^2)$, assuming $N \ll M$, by making use of the following observation.&lt;/p&gt;

&lt;div class=&quot;observation&quot;&gt;
&lt;b&gt;Observation.&lt;/b&gt; For every subproblem $\mathcal{P}(i,x,y)$, the positions $x$ and $y$ of each robot correspond always to some $T_k$ s.t. $1 \le k \lt i$ (already executed queries). In addition, it must be the case that one of the robots is at position $T_{i-1}$. The only exception to this rule is when no query has been executed yet, in which case the robots can be at any position.
&lt;/div&gt;

&lt;p&gt;Then, each subproblem can simply be represented by:&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{equation*}
\label{dp2}
\mathcal{P}(i,j) = |T_i-S_i| + \min
 \begin{cases}
  \mathcal{P}(i+1,j) + |S_i-T_{i-1}| \\[1em]
  \mathcal{P}(i+1,i-1) + |S_i-T_j|  &amp; \text{, if } j &gt; 0 \\[1em]
  \mathcal{P}(i+1,i-1)              &amp; \text{, if } j = 0 \\[1em]
 \end{cases} \\[2em]
\end{equation*} %]]&gt;&lt;/script&gt;&lt;br /&gt;
, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$1 \le i \le N$ denotes the next query to be executed&lt;/li&gt;
  &lt;li&gt;$0 \le j \lt i$ denotes the last query executed by the robot which is inactive by a longer time. If $j=0$, then it hasn’t executed any query yet.&lt;/li&gt;
  &lt;li&gt;the base cases and the optimal solution are both computed in a way similar to the recurrence in \eqref{dp1}&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;improved-complexity&quot;&gt;Improved complexity&lt;/h4&gt;

&lt;p&gt;The number of DP entries to be computed is directly given by the ranges of the variables $i$ and $j$. Moreover, it takes O(1) time to compute each of them. Thus, the overall time complexity is:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\begin{equation*}
\sum_{i=1}^N \sum_{j=0}^{i-1} O(1) = \sum_{i=1}^N O(i) = \Theta(N^2) 
\end{equation*}&lt;/script&gt;

&lt;h3 id=&quot;code&quot;&gt;Code&lt;/h3&gt;

&lt;p&gt;The code is written in Python3. The input format is explained &lt;a href=&quot;https://www.hackerrank.com/contests/w19/challenges/two-robots&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;inf&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# base case&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;\
                 &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;queries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/div&gt;

</content>
 </entry>
 
 <entry>
   <title>First commit</title>
   <link href="http://pmatias.com/2016/02/28/first-commit/"/>
   <updated>2016-02-28T00:00:00+00:00</updated>
   <id>http://pmatias.com/2016/02/28/first-commit</id>
   <content type="html">&lt;p&gt;Life is awesome and full of challenges! I like many things in life. For instance, I like Theoretical Computer Science, puzzles and to be challenged. I also like to learn new stuff and &lt;a href=&quot;https://github.com/zydeon&quot;&gt;build things&lt;/a&gt;. This blog is going to help me collect and share all this cool stuff!&lt;/p&gt;

&lt;p&gt;Probably, you will see many posts about a particular intriguing problem in Computer Science! Such problems might come, for example, from programming contests, research papers, or pretty much anywhere, as long as they keep me awaken at night. I will also publish topics on TCS which I find too fascinating to be left alone unnoticed. These will mostly be related to algorithms and combinatorial optimisation and they might arise from places like [1] or [2].&lt;/p&gt;

&lt;p&gt;Hope you enjoy and stay tuned!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr class=&quot;gradient small&quot; /&gt;

&lt;p&gt;[1]    V. Vazirani - &lt;a href=&quot;http://www.cc.gatech.edu/fac/Vijay.Vazirani/book.pdf&quot;&gt;Approximation Algorithms&lt;/a&gt;&lt;br /&gt;
[2]    S. Arora and B. Barak - &lt;a href=&quot;http://theory.cs.princeton.edu/complexity/book.pdf&quot;&gt;Computational Complexity: A Modern Approach&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
